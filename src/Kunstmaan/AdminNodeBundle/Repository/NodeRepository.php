<?php

namespace Kunstmaan\AdminNodeBundle\Repository;

use Kunstmaan\AdminNodeBundle\Entity\HasNode;

use Kunstmaan\AdminNodeBundle\Entity\Node;
use Kunstmaan\AdminBundle\Entity\PageIFace;
use Kunstmaan\AdminBundle\Modules\ClassLookup;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * NodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NodeRepository extends EntityRepository
{
	public function getTopNodes($user, $permission)
	{
	    $qb = $this->createQueryBuilder('b')
	               ->select('b')
                   ->where('b.parent is null')
                   ->andWhere('b.id IN (
                        SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = b.refEntityname AND p.permissions LIKE ?1 AND p.refGroup IN(?2)
                   )')
	               ->addOrderBy('b.sequencenumber', 'DESC')
                   ->setParameter(1, '%|'.$permission.':1|%')
                   ->setParameter(2, $user->getGroupIds());

	    return $qb->getQuery()
	              ->getResult();
	}
	
	public function getChildren(Node $node){
		return $this->findBy(array("parent"=>$node->getId()));
	}
	
	public function getNodeFor(HasNode $hasNode) {
		return $this->findOneBy(array('refId' => $hasNode->getId(), 'refEntityname' => ClassLookup::getClass($hasNode)));
	}
	
	public function getNodeForSlug($parentNode, $slug){
		$slugparts = explode("/", $slug);
		$result = null;
		foreach($slugparts as $slugpart){
			if($parentNode){
				//$result = $this->findOneBy(array('slug' => $slugpart, 'parent' => $parentNode->getId())) or $result;
				if($r = $this->findOneBy(array('slug' => $slugpart, 'parent' => $parentNode->getId()))){
					$result = $r;
				}
			} else {
				//$result = $this->findOneBy(array('slug' => $slugpart)) or $result;
				if($r = $this->findOneBy(array('slug' => $slugpart))){
					$result = $r;
				}
			}
		}
		return $result;
	}
	
	public function createNodeFor(HasNode $hasNode){
		$em = $this->getEntityManager();
		$classname = ClassLookup::getClass($hasNode);
		if(!$hasNode->getId()>0){
			throw new \Exception("the entity of class ". $classname . " has no id, maybe you forgot to flush first");
		}
		$entityrepo = $em->getRepository($classname);
		$node = $this->findOneBy(array('refId' => $hasNode->getId(), 'refEntityname' => $classname));
		if($node==null){
			$node = new Node();
			$node->setRefId($hasNode->getId());
			$node->setRefEntityname($classname);
			
			if($hasnode->getParent()==null){
		    	$node->setSequencenumber(100);
		    }else{
		    	$parent = $node->getParent();
		    	$children = $node->getChildren();
		    	$node->setSequencenumber(200);//sizeof($children));
		    }
		    			
			$parent = $hasNode->getParent();
			if($parent){
				$parentNode = $em->getRepository('KunstmaanAdminNodeBundle:Node')->findOneBy(array('refId' => $parent->getId(), 'refEntityname' => ClassLookup::getClass($parent)));
			  	$node->setParent($parentNode);
			}
			$node->setTitle($hasNode->__toString());
			$node->setSlug(strtolower(str_replace(" ", "-", $hasNode->__toString())));
			$node->setOnline($hasNode->isOnline());
			$em->persist($node);
			$em->flush();
		}
	}
}